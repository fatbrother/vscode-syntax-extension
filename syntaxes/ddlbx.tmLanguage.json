{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "DDLBX",
  "scopeName": "source.ddlbx",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#endCaptures"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#variable_declaration"
    },
    {
      "include": "#type"
    },
    {
      "include": "#type_with_variable"
    },
    {
      "include": "#type_List"
    },
    {
      "include": "#string"
    },
    {
      "include": "#symbol"
    },
    {
      "include": "#while_loop"
    },
    {
      "include": "#function_definition"
    }
  ],
  "repository": {
    "endCaptures": {
      "patterns": [
        {
          "match": "!",
          "name": "keyword.control.ddlbx"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "match": "//.*$",
          "name": "comment.line.double-slash.ddlbx"
        },
        {
          "begin": "/\\*",
          "end": "\\*/",
          "name": "comment.block.ddlbx"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "match": "\\b(?:if|else|return|break|continue|case|default|goto|try|catch|true|false|maybe)\\b",
          "name": "keyword.ddlbx"
        }
      ]
    },
    "digit": {
      "patterns": [
        {
          "match": "\\b[0-9]+\\b",
          "name": "constant.numeric.integer.ddlbx"
        }
      ]
    },
    "letter": {
      "patterns": [
        {
          "match": "\\b[a-zA-Z]+\\b",
          "name": "constant.character.ddlbx"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "begin": "'",
          "end": "'",
          "name": "string.quoted.double.ddlbx",
          "patterns": [
            {
              "match": "\\\\(?:[\"\\\\/bfnrt]|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
              "name": "constant.character.escape.ddlbx"
            }
          ]
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "match": "\\b(?:Int|Str|Flt|Boo|Reg)\\b",
          "name": "storage.type.ddlbx"
        }
      ]
    },
    "type_List": {
      "patterns": [
        {
          "match": "\\b(List)\\b",
          "name": "storage.type.list.ddlbx"
        },
        {
          "begin": "<",
          "end": ">",
          "name": "meta.type.ddlbx",
          "patterns": [
            {
              "include": "#type"
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "match": "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)",
          "name": "variable.parameter.ddlbx"
        },
        {
          "match": ",",
          "name": "punctuation.ddlbx"
        }
      ]
    },
    "type_with_variable": {
      "patterns": [
        {
          "include": "#type",
          "patterns": [
            {
              "include": "#variable"
            }
          ]
        }
      ]
    },
    "variable_declaration": {
      "patterns": [
        {
          "match": "\\b(Int|Str|Flt|Boo|Reg|List)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "storage.type.ddlbx" },
            "2": { "name": "variable.name.ddlbx" }
          }
        }
      ]
    },
    "while_loop": {
      "patterns": [
        {
          "match": "\\bwhile\\s*\\(",
          "name": "keyword.control.loop.ddlbx"
        }
      ]
    },
    "function_definition": {
      "patterns": [
        {
          "match": "\\bfun\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "1": { "name": "entity.name.function.ddlbx" }
        }
      ]
    },

    "operators": {
      "patterns": [
        {
          "begin": "((?<!\\w)sizeof(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.functionlike.ddlbx keyword.operator.sizeof.ddlbx"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.ddlbx punctuation.definition.comment.begin.ddlbx"
            },
            "4": {
              "name": "comment.block.ddlbx"
            },
            "5": {
              "name": "comment.block.ddlbx punctuation.definition.comment.end.ddlbx"
            },
            "6": {
              "name": "punctuation.section.arguments.begin.bracket.round.operator.sizeof.ddlbx"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.operator.sizeof.ddlbx"
            }
          },
          "contentName": "meta.arguments.operator.sizeof",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "begin": "((?<!\\w)alignof(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.functionlike.ddlbx keyword.operator.alignof.ddlbx"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.ddlbx punctuation.definition.comment.begin.ddlbx"
            },
            "4": {
              "name": "comment.block.ddlbx"
            },
            "5": {
              "name": "comment.block.ddlbx punctuation.definition.comment.end.ddlbx"
            },
            "6": {
              "name": "punctuation.section.arguments.begin.bracket.round.operator.alignof.ddlbx"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.operator.alignof.ddlbx"
            }
          },
          "contentName": "meta.arguments.operator.alignof",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "begin": "((?<!\\w)alignas(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.functionlike.ddlbx keyword.operator.alignas.ddlbx"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.ddlbx punctuation.definition.comment.begin.ddlbx"
            },
            "4": {
              "name": "comment.block.ddlbx"
            },
            "5": {
              "name": "comment.block.ddlbx punctuation.definition.comment.end.ddlbx"
            },
            "6": {
              "name": "punctuation.section.arguments.begin.bracket.round.operator.alignas.ddlbx"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.operator.alignas.ddlbx"
            }
          },
          "contentName": "meta.arguments.operator.alignas",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "begin": "((?<!\\w)typeid(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.functionlike.ddlbx keyword.operator.typeid.ddlbx"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.ddlbx punctuation.definition.comment.begin.ddlbx"
            },
            "4": {
              "name": "comment.block.ddlbx"
            },
            "5": {
              "name": "comment.block.ddlbx punctuation.definition.comment.end.ddlbx"
            },
            "6": {
              "name": "punctuation.section.arguments.begin.bracket.round.operator.typeid.ddlbx"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.operator.typeid.ddlbx"
            }
          },
          "contentName": "meta.arguments.operator.typeid",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "begin": "((?<!\\w)noexcept(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.functionlike.ddlbx keyword.operator.noexcept.ddlbx"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.ddlbx punctuation.definition.comment.begin.ddlbx"
            },
            "4": {
              "name": "comment.block.ddlbx"
            },
            "5": {
              "name": "comment.block.ddlbx punctuation.definition.comment.end.ddlbx"
            },
            "6": {
              "name": "punctuation.section.arguments.begin.bracket.round.operator.noexcept.ddlbx"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.operator.noexcept.ddlbx"
            }
          },
          "contentName": "meta.arguments.operator.noexcept",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "begin": "(\\bsizeof\\.\\.\\.)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.functionlike.ddlbx keyword.operator.sizeof.variadic.ddlbx"
            },
            "2": {
              "patterns": [
                {
                  "include": "#inline_comment"
                }
              ]
            },
            "3": {
              "name": "comment.block.ddlbx punctuation.definition.comment.begin.ddlbx"
            },
            "4": {
              "name": "comment.block.ddlbx"
            },
            "5": {
              "name": "comment.block.ddlbx punctuation.definition.comment.end.ddlbx"
            },
            "6": {
              "name": "punctuation.section.arguments.begin.bracket.round.operator.sizeof.variadic.ddlbx"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.operator.sizeof.variadic.ddlbx"
            }
          },
          "contentName": "meta.arguments.operator.sizeof.variadic",
          "patterns": [
            {
              "include": "#evaluation_context"
            }
          ]
        },
        {
          "match": "--",
          "name": "keyword.operator.decrement.ddlbx"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.ddlbx"
        },
        {
          "match": "%=|\\+=|-=|\\*=|(?<!\\()\\/=",
          "name": "keyword.operator.assignment.compound.ddlbx"
        },
        {
          "match": "&=|\\^=|<<=|>>=|\\|=",
          "name": "keyword.operator.assignment.compound.bitwise.ddlbx"
        },
        {
          "match": "<<|>>",
          "name": "keyword.operator.bitwise.shift.ddlbx"
        },
        {
          "match": "!=|<=|>=|==|<|>",
          "name": "keyword.operator.comparison.ddlbx"
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.ddlbx"
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.bitwise.ddlbx"
        },
        {
          "include": "#assignment_operator"
        },
        {
          "match": "%|\\*|\\/|-|\\+",
          "name": "keyword.operator.arithmetic.ddlbx"
        },
        {
          "include": "#ternary_operator"
        }
      ]
    }
  }
}
